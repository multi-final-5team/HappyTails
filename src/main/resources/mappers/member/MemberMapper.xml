<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.happytails.member.model.dao.MemberDAO">

    <resultMap id="memberResultMap" type="com.multi.happytails.member.model.dto.MemberDTO">
        <id column="USER_NO" property="no" />
        <result column="USER_ID" property="id" />
        <result column="USER_PASSWORD" property="pwd" />
        <result column="USER_EMAIL" property="email" />
        <result column="USER_NAME" property="name" />
        <result column="USER_NICKNAME" property="nickname" />
        <result column="USER_GENDER" property="gender" />
        <result column="USER_TEL" property="tel" />
        <result column="USER_SIGNUP_DATE" property="signupDate" />
        <result column="USER_SIGNUP_PATH_FLAG" property="signupPathFlag" />
        <result column="USER_DELETE_ACCOUNT_DATE" property="deleteDate" />
        <result column="USER_DELETE_ACCOUNT_FLAG" property="deleteAccountFlag" />
        <result column="USER_ROLE" property="role" />
    </resultMap>

    <select id="findMemberById" resultMap="memberResultMap">
        SELECT
        USER_NO,
        USER_ID,
        USER_PASSWORD,
        USER_EMAIL,
        USER_NAME,
        USER_NICKNAME,
        USER_GENDER,
        USER_TEL,
        USER_SIGNUP_DATE,
        USER_SIGNUP_PATH_FLAG,
        USER_DELETE_ACCOUNT_DATE,
        USER_DELETE_ACCOUNT_FLAG,
        USER_ROLE
        FROM TB_USERS
        WHERE USER_ID = #{id}
    </select>

    <select id="findMemberByUserNo" resultMap="memberResultMap">
        SELECT
        USER_NO,
        USER_ID,
        USER_PASSWORD,
        USER_EMAIL,
        USER_NAME,
        USER_NICKNAME,
        USER_GENDER,
        USER_TEL,
        USER_SIGNUP_DATE,
        USER_SIGNUP_PATH_FLAG,
        USER_DELETE_ACCOUNT_DATE,
        USER_DELETE_ACCOUNT_FLAG,
        USER_ROLE
        FROM TB_USERS
        WHERE USER_NO = #{no}
    </select>

    <select id="findUserByDetails" resultMap="memberResultMap">
        SELECT
            USER_NO,
            USER_ID,
            USER_PASSWORD,
            USER_EMAIL,
            USER_NAME,
            USER_NICKNAME,
            USER_GENDER,
            USER_TEL,
            USER_SIGNUP_DATE,
            USER_SIGNUP_PATH_FLAG,
            USER_DELETE_ACCOUNT_DATE,
            USER_DELETE_ACCOUNT_FLAG,
            USER_ROLE
        FROM TB_USERS
        WHERE (USER_ID = #{id} OR USER_NAME = #{name}) AND USER_EMAIL = #{email}
    </select>

    <update id="updatePassword">
        UPDATE TB_USERS SET USER_PASSWORD = #{newPassword} WHERE USER_ID = #{id}
    </update>

    <insert id="insertMember">
        INSERT INTO TB_USERS (
            USER_ID,
            USER_PASSWORD,
            USER_EMAIL,
            USER_NAME,
            USER_NICKNAME,
            USER_GENDER,
            USER_TEL,
            USER_SIGNUP_PATH_FLAG,
            USER_ROLE
        ) VALUES (
            #{id},
            #{pwd},
            #{email},
            #{name},
            #{nickname},
            #{gender},
            #{tel},
            #{signupPathFlag},
            #{role}
        )
    </insert>

    <update id="updateMember">
        UPDATE TB_USERS
        SET
            USER_EMAIL = #{email},
            USER_NAME = #{name},
            USER_NICKNAME = #{nickname},
            USER_GENDER = #{gender},
            USER_TEL = #{tel},
            USER_SIGNUP_PATH_FLAG = #{signupPathFlag}
        WHERE USER_ID = #{id}
    </update>

    <update id="deleteMember">
        UPDATE TB_USERS
        SET USER_DELETE_ACCOUNT_FLAG = 'Y',
            USER_DELETE_ACCOUNT_DATE = CURRENT_TIMESTAMP
        WHERE USER_ID = #{id}
    </update>

    <select id="findMemberByEmail" resultMap="memberResultMap">
        SELECT
            USER_NO,
            USER_ID,
            USER_PASSWORD,
            USER_EMAIL,
            USER_NAME,
            USER_NICKNAME,
            USER_GENDER,
            USER_TEL,
            USER_SIGNUP_DATE,
            USER_SIGNUP_PATH_FLAG,
            USER_DELETE_ACCOUNT_DATE,
            USER_DELETE_ACCOUNT_FLAG,
            USER_ROLE
        FROM TB_USERS
        WHERE USER_EMAIL = #{email}
    </select>

    <update id="updateMemberRole">
        UPDATE tb_users
        SET USER_ROLE= #{role}
        WHERE USER_NO= #{no}
    </update>

    <!-- 회원목록 페이징 -->
    <select id="getListMember"
            parameterType="com.multi.happytails.patrol.pageable.model.dto.RequestList"
            resultMap="memberResultMap">
        SELECT USER_NO, USER_ID, USER_PASSWORD, USER_NAME, USER_NICKNAME, USER_AGE, USER_GENDER, USER_TEL, USER_SIGNUP_DATE, USER_DELETE_ACCOUNT_FLAG, USER_ROLE, USER_EMAIL, USER_SIGNUP_PATH_FLAG
        FROM tb_users
        <where>
            <if test="data.id != null and data.id !='' ">
                AND title LIKE CONCAT('%' , #{data.id} , '%')
            </if>
        </where>
        <!--ORDER BY 절 추가-->
        <if test="pageable.sort != null and !pageable.sort.isEmpty()">
            ORDER BY
            <foreach collection="pageable.sort" item="order" separator=",">
                ${order.property} ${order.direction}
            </foreach>
        </if>
        <!--페이징 처리-->
        LIMIT #{pageable.offset} , #{pageable.pageSize}
    </select>

    <!-- 회원 목록 카운트 -->
    <select id="getListMemberCount" parameterType="com.multi.happytails.member.model.dto.MemberDTO" resultType="int">
        SELECT COUNT(*)
        FROM tb_users
        <where>
            <if test="id != null and id !='' ">
                AND title LIKE CONCAT('%' , #{id} , '%')
            </if>
        </where>
    </select>
</mapper>
